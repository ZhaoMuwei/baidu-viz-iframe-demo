{"version":3,"sources":["PopupButton.js","App.js","serviceWorker.js","index.js"],"names":["baseURL","keyToIDMapping","bj","gz","sh","props","useState","visible","setVisible","type","onClick","centered","closable","width","footer","onCancel","bodyStyle","height","padding","title","style","outline","border","src","region","dataSource","key","name","temperature","columns","dataIndex","render","text","record","PopupButton","App","margin","marginLeft","bordered","pagination","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAIMA,EAAU,mDAGVC,EAAiB,CAErBC,GAAIF,EAAU,mCAEdG,GAAIH,EAAU,mCAEdI,GAAIJ,EAAU,oCAGD,WAAAK,GAAS,MAEQC,oBAAS,GAFjB,mBAEfC,EAFe,KAENC,EAFM,KAUtB,OACE,oCACA,kBAAC,IAAD,CAAQC,KAAK,OAAOC,QAPJ,kBAAMF,GAAW,KAOjC,4BAEA,kBAAC,IAAD,CACEG,UAAQ,EACRC,UAAQ,EAGRC,MAAO,IACPC,OAAQ,KACRP,QAASA,EACTQ,SAdc,kBAAMP,GAAW,IAe/BQ,UAAW,CAACC,OAAQ,IAAKC,QAAS,IAGlC,4BACEC,MAAM,qBACNC,MAAO,CAACP,MAAO,OAAQI,OAAQ,OAAQI,QAAS,OAAQC,OAAQ,QAChEC,IAAKtB,EAAeI,EAAMmB,aCvC5BC,G,OAAa,CACjB,CAACC,IAAK,KAAMC,KAAM,eAAMC,YAAa,IACrC,CAACF,IAAK,KAAMC,KAAM,eAAMC,YAAa,IACrC,CAACF,IAAK,KAAMC,KAAM,eAAMC,YAAa,MAIjCC,EAAU,CACd,CAACV,MAAO,eAAMW,UAAW,OAAQJ,IAAK,QACtC,CAACP,MAAO,eAAMW,UAAW,cAAeJ,IAAK,eAC7C,CACEP,MAAO,eACPW,UAAW,YACXJ,IAAK,YACLK,OAAQ,SAACC,EAAMC,GAAP,OAEN,kBAACC,EAAD,CAAaV,OAAQS,EAAOP,SAmBnBS,EAdH,kBACV,yBAAKf,MAAO,CAACP,MAAO,IAAKuB,OAAQ,cAE/B,wBAAIhB,MAAO,CAACiB,WAAY,KAAxB,8CAEA,kBAAC,IAAD,CACEC,UAAQ,EACRT,QAASA,EACTJ,WAAYA,EACZc,YAAY,MCxBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASd,OACP,kBAAC,IAAMe,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.67b3db33.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {Button, Modal} from 'antd';\n\n// 物可视分享链接前缀\nconst baseURL = 'https://viz.baidubce.com/prod/sharing/dashboard/';\n\n// 不同城市对应不同的仪表盘\nconst keyToIDMapping = {\n  // 北京\n  bj: baseURL + 'ccc7015d5929b3c8b99242db2a1c97c9',\n  // 广州\n  gz: baseURL + '03723326fe8b83b25fe4fcf2c9e8365d',\n  // 上海\n  sh: baseURL + 'dce1cb6e87a0f8597948dff2331b1f5b',\n};\n\nexport default props => {\n  // 控制弹窗显隐的 state\n  const [visible, setVisible] = useState(false);\n\n  // 显示弹窗\n  const showPopup = () => setVisible(true);\n\n  // 隐藏弹窗\n  const hidePopup = () => setVisible(false);\n\n  return (\n    <>\n    <Button type=\"link\" onClick={showPopup}>查看详情</Button>\n\n    <Modal\n      centered\n      closable\n      // 由于本例中的 3 个仪表盘都是 800 * 600 px\n      // 因此将弹窗也设定为 800px 宽\n      width={800}\n      footer={null}\n      visible={visible}\n      onCancel={hidePopup}\n      bodyStyle={{height: 600, padding: 0}}\n    >\n      {/* iframe 显示仪表盘 */}\n      <iframe\n        title=\"仪表盘\"\n        style={{width: '100%', height: '100%', outline: 'none', border: 'none'}}\n        src={keyToIDMapping[props.region]}\n      />\n    </Modal>\n    </>\n  );\n};\n","import React from 'react';\nimport {Table} from 'antd';\nimport PopupButton from './PopupButton';\nimport './App.css';\n\n// 虚拟的数据\nconst dataSource = [\n  {key: 'bj', name: '北京', temperature: 32},\n  {key: 'sh', name: '上海', temperature: 28},\n  {key: 'gz', name: '广州', temperature: 30},\n];\n\n// 表格列定义\nconst columns = [\n  {title: '城市', dataIndex: 'name', key: 'name'},\n  {title: '气温', dataIndex: 'temperature', key: 'temperature'},\n  {\n    title: '操作',\n    dataIndex: 'operation',\n    key: 'operation',\n    render: (text, record) => (\n      // 最后一列渲染操作按钮\n      <PopupButton region={record.key} />\n    )\n  },\n];\n\nconst App = () => (\n  <div style={{width: 450, margin: '50px auto'}}>\n    {/* 标题 */}\n    <h1 style={{marginLeft: 15}}>城市气温汇总表</h1>\n    {/* 表格 */}\n    <Table\n      bordered\n      columns={columns}\n      dataSource={dataSource}\n      pagination={false}\n    />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}